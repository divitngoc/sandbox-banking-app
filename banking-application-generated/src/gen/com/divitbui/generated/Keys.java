/*
 * This file is generated by jOOQ.
 */
package com.divitbui.generated;


import com.divitbui.generated.tables.Account;
import com.divitbui.generated.tables.Balance;
import com.divitbui.generated.tables.Transaction;
import com.divitbui.generated.tables.records.AccountRecord;
import com.divitbui.generated.tables.records.BalanceRecord;
import com.divitbui.generated.tables.records.TransactionRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * the default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> KEY_ACCOUNT_PRIMARY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("KEY_account_PRIMARY"), new TableField[] { Account.ACCOUNT.UUID }, true);
    public static final UniqueKey<BalanceRecord> KEY_BALANCE_PRIMARY = Internal.createUniqueKey(Balance.BALANCE, DSL.name("KEY_balance_PRIMARY"), new TableField[] { Balance.BALANCE.ID }, true);
    public static final UniqueKey<BalanceRecord> KEY_BALANCE_UQ_ACCOUNT_ID_CURRENCY_CODE = Internal.createUniqueKey(Balance.BALANCE, DSL.name("KEY_balance_uq_account_id_currency_code"), new TableField[] { Balance.BALANCE.ACCOUNT_UUID, Balance.BALANCE.CURRENCY_CODE }, true);
    public static final UniqueKey<TransactionRecord> KEY_TRANSACTION_PRIMARY = Internal.createUniqueKey(Transaction.TRANSACTION, DSL.name("KEY_transaction_PRIMARY"), new TableField[] { Transaction.TRANSACTION.UUID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BalanceRecord, AccountRecord> FK_BALANCE_ACCOUNT_UUID = Internal.createForeignKey(Balance.BALANCE, DSL.name("fk_balance_account_uuid"), new TableField[] { Balance.BALANCE.ACCOUNT_UUID }, Keys.KEY_ACCOUNT_PRIMARY, new TableField[] { Account.ACCOUNT.UUID }, true);
    public static final ForeignKey<TransactionRecord, AccountRecord> FK_TRANSACTION_ACCOUNT_ID_ACCOUNT_UUID = Internal.createForeignKey(Transaction.TRANSACTION, DSL.name("fk_transaction_account_id_account_uuid"), new TableField[] { Transaction.TRANSACTION.ACCOUNT_UUID }, Keys.KEY_ACCOUNT_PRIMARY, new TableField[] { Account.ACCOUNT.UUID }, true);
}
