/*
 * This file is generated by jOOQ.
 */
package com.divitbui.generated.tables.daos;


import com.divitbui.generated.tables.Transaction;
import com.divitbui.generated.tables.records.TransactionRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionDao extends DAOImpl<TransactionRecord, com.divitbui.generated.tables.pojos.Transaction, UUID> {

    /**
     * Create a new TransactionDao without any configuration
     */
    public TransactionDao() {
        super(Transaction.TRANSACTION, com.divitbui.generated.tables.pojos.Transaction.class);
    }

    /**
     * Create a new TransactionDao with an attached configuration
     */
    public TransactionDao(Configuration configuration) {
        super(Transaction.TRANSACTION, com.divitbui.generated.tables.pojos.Transaction.class, configuration);
    }

    @Override
    public UUID getId(com.divitbui.generated.tables.pojos.Transaction object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchRangeOfUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Transaction.TRANSACTION.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchByUuid(UUID... values) {
        return fetch(Transaction.TRANSACTION.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public com.divitbui.generated.tables.pojos.Transaction fetchOneByUuid(UUID value) {
        return fetchOne(Transaction.TRANSACTION.UUID, value);
    }

    /**
     * Fetch records that have <code>account_uuid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchRangeOfAccountUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Transaction.TRANSACTION.ACCOUNT_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>account_uuid IN (values)</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchByAccountUuid(UUID... values) {
        return fetch(Transaction.TRANSACTION.ACCOUNT_UUID, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transaction.TRANSACTION.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchByDescription(String... values) {
        return fetch(Transaction.TRANSACTION.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchRangeOfAmount(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Transaction.TRANSACTION.AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchByAmount(BigDecimal... values) {
        return fetch(Transaction.TRANSACTION.AMOUNT, values);
    }

    /**
     * Fetch records that have <code>currency_code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchRangeOfCurrencyCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transaction.TRANSACTION.CURRENCY_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>currency_code IN (values)</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchByCurrencyCode(String... values) {
        return fetch(Transaction.TRANSACTION.CURRENCY_CODE, values);
    }

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchRangeOfDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Transaction.TRANSACTION.DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchByDate(LocalDateTime... values) {
        return fetch(Transaction.TRANSACTION.DATE, values);
    }

    /**
     * Fetch records that have <code>payee_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchRangeOfPayeeName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transaction.TRANSACTION.PAYEE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>payee_name IN (values)</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchByPayeeName(String... values) {
        return fetch(Transaction.TRANSACTION.PAYEE_NAME, values);
    }

    /**
     * Fetch records that have <code>payer_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchRangeOfPayerName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transaction.TRANSACTION.PAYER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>payer_name IN (values)</code>
     */
    public List<com.divitbui.generated.tables.pojos.Transaction> fetchByPayerName(String... values) {
        return fetch(Transaction.TRANSACTION.PAYER_NAME, values);
    }
}
