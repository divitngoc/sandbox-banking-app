/*
 * This file is generated by jOOQ.
 */
package com.divitbui.generated.tables;


import com.divitbui.generated.DefaultSchema;
import com.divitbui.generated.Indexes;
import com.divitbui.generated.Keys;
import com.divitbui.generated.tables.records.TransactionRecord;

import converter.ByteArrayToUUIDConverter;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transaction extends TableImpl<TransactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>transaction</code>
     */
    public static final Transaction TRANSACTION = new Transaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionRecord> getRecordType() {
        return TransactionRecord.class;
    }

    /**
     * The column <code>transaction.uuid</code>.
     */
    public final TableField<TransactionRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.BINARY(16).nullable(false), this, "", new ByteArrayToUUIDConverter());

    /**
     * The column <code>transaction.account_uuid</code>.
     */
    public final TableField<TransactionRecord, java.util.UUID> ACCOUNT_UUID = createField(DSL.name("account_uuid"), SQLDataType.BINARY(16).nullable(false), this, "", new ByteArrayToUUIDConverter());

    /**
     * The column <code>transaction.description</code>.
     */
    public final TableField<TransactionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>transaction.amount</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>transaction.currency_code</code>.
     */
    public final TableField<TransactionRecord, String> CURRENCY_CODE = createField(DSL.name("currency_code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>transaction.date</code>.
     */
    public final TableField<TransactionRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>transaction.payee_name</code>.
     */
    public final TableField<TransactionRecord, String> PAYEE_NAME = createField(DSL.name("payee_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>transaction.payer_name</code>.
     */
    public final TableField<TransactionRecord, String> PAYER_NAME = createField(DSL.name("payer_name"), SQLDataType.VARCHAR(255), this, "");

    private Transaction(Name alias, Table<TransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transaction(Name alias, Table<TransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>transaction</code> table reference
     */
    public Transaction(String alias) {
        this(DSL.name(alias), TRANSACTION);
    }

    /**
     * Create an aliased <code>transaction</code> table reference
     */
    public Transaction(Name alias) {
        this(alias, TRANSACTION);
    }

    /**
     * Create a <code>transaction</code> table reference
     */
    public Transaction() {
        this(DSL.name("transaction"), null);
    }

    public <O extends Record> Transaction(Table<O> child, ForeignKey<O, TransactionRecord> key) {
        super(child, key, TRANSACTION);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSACTION_FK_TRANSACTION_ACCOUNT_IDX);
    }

    @Override
    public UniqueKey<TransactionRecord> getPrimaryKey() {
        return Keys.KEY_TRANSACTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<TransactionRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionRecord>>asList(Keys.KEY_TRANSACTION_PRIMARY);
    }

    @Override
    public List<ForeignKey<TransactionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransactionRecord, ?>>asList(Keys.FK_TRANSACTION_ACCOUNT_ID_ACCOUNT_UUID);
    }

    private transient Account _account;

    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.FK_TRANSACTION_ACCOUNT_ID_ACCOUNT_UUID);

        return _account;
    }

    @Override
    public Transaction as(String alias) {
        return new Transaction(DSL.name(alias), this);
    }

    @Override
    public Transaction as(Name alias) {
        return new Transaction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(String name) {
        return new Transaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(Name name) {
        return new Transaction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<java.util.UUID, java.util.UUID, String, BigDecimal, String, LocalDateTime, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
