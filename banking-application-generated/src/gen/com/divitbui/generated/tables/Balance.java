/*
 * This file is generated by jOOQ.
 */
package com.divitbui.generated.tables;


import com.divitbui.generated.DefaultSchema;
import com.divitbui.generated.Indexes;
import com.divitbui.generated.Keys;
import com.divitbui.generated.tables.records.BalanceRecord;

import converter.ByteArrayToUUIDConverter;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Balance extends TableImpl<BalanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>balance</code>
     */
    public static final Balance BALANCE = new Balance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BalanceRecord> getRecordType() {
        return BalanceRecord.class;
    }

    /**
     * The column <code>balance.id</code>.
     */
    public final TableField<BalanceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>balance.currency_code</code>.
     */
    public final TableField<BalanceRecord, String> CURRENCY_CODE = createField(DSL.name("currency_code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>balance.balance_value</code>.
     */
    public final TableField<BalanceRecord, BigDecimal> BALANCE_VALUE = createField(DSL.name("balance_value"), SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>balance.account_uuid</code>.
     */
    public final TableField<BalanceRecord, UUID> ACCOUNT_UUID = createField(DSL.name("account_uuid"), SQLDataType.BINARY(16), this, "", new ByteArrayToUUIDConverter());

    private Balance(Name alias, Table<BalanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Balance(Name alias, Table<BalanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>balance</code> table reference
     */
    public Balance(String alias) {
        this(DSL.name(alias), BALANCE);
    }

    /**
     * Create an aliased <code>balance</code> table reference
     */
    public Balance(Name alias) {
        this(alias, BALANCE);
    }

    /**
     * Create a <code>balance</code> table reference
     */
    public Balance() {
        this(DSL.name("balance"), null);
    }

    public <O extends Record> Balance(Table<O> child, ForeignKey<O, BalanceRecord> key) {
        super(child, key, BALANCE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BALANCE_FK_BALANCE_ACCOUNT_ID_IDX);
    }

    @Override
    public Identity<BalanceRecord, Integer> getIdentity() {
        return (Identity<BalanceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BalanceRecord> getPrimaryKey() {
        return Keys.KEY_BALANCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<BalanceRecord>> getKeys() {
        return Arrays.<UniqueKey<BalanceRecord>>asList(Keys.KEY_BALANCE_PRIMARY, Keys.KEY_BALANCE_UQ_ACCOUNT_ID_CURRENCY_CODE);
    }

    @Override
    public List<ForeignKey<BalanceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BalanceRecord, ?>>asList(Keys.FK_BALANCE_ACCOUNT_UUID);
    }

    private transient Account _account;

    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.FK_BALANCE_ACCOUNT_UUID);

        return _account;
    }

    @Override
    public Balance as(String alias) {
        return new Balance(DSL.name(alias), this);
    }

    @Override
    public Balance as(Name alias) {
        return new Balance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Balance rename(String name) {
        return new Balance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Balance rename(Name name) {
        return new Balance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, BigDecimal, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
