/*
 * This file is generated by jOOQ.
 */
package com.divitbui.generated.tables.records;


import com.divitbui.generated.tables.Balance;

import java.math.BigDecimal;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BalanceRecord extends UpdatableRecordImpl<BalanceRecord> implements Record4<Integer, String, BigDecimal, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>balance.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>balance.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>balance.currency_code</code>.
     */
    public void setCurrencyCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>balance.currency_code</code>.
     */
    public String getCurrencyCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>balance.balance_value</code>.
     */
    public void setBalanceValue(BigDecimal value) {
        set(2, value);
    }

    /**
     * Getter for <code>balance.balance_value</code>.
     */
    public BigDecimal getBalanceValue() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>balance.account_uuid</code>.
     */
    public void setAccountUuid(UUID value) {
        set(3, value);
    }

    /**
     * Getter for <code>balance.account_uuid</code>.
     */
    public UUID getAccountUuid() {
        return (UUID) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, BigDecimal, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, BigDecimal, UUID> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Balance.BALANCE.ID;
    }

    @Override
    public Field<String> field2() {
        return Balance.BALANCE.CURRENCY_CODE;
    }

    @Override
    public Field<BigDecimal> field3() {
        return Balance.BALANCE.BALANCE_VALUE;
    }

    @Override
    public Field<UUID> field4() {
        return Balance.BALANCE.ACCOUNT_UUID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getCurrencyCode();
    }

    @Override
    public BigDecimal component3() {
        return getBalanceValue();
    }

    @Override
    public UUID component4() {
        return getAccountUuid();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getCurrencyCode();
    }

    @Override
    public BigDecimal value3() {
        return getBalanceValue();
    }

    @Override
    public UUID value4() {
        return getAccountUuid();
    }

    @Override
    public BalanceRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public BalanceRecord value2(String value) {
        setCurrencyCode(value);
        return this;
    }

    @Override
    public BalanceRecord value3(BigDecimal value) {
        setBalanceValue(value);
        return this;
    }

    @Override
    public BalanceRecord value4(UUID value) {
        setAccountUuid(value);
        return this;
    }

    @Override
    public BalanceRecord values(Integer value1, String value2, BigDecimal value3, UUID value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BalanceRecord
     */
    public BalanceRecord() {
        super(Balance.BALANCE);
    }

    /**
     * Create a detached, initialised BalanceRecord
     */
    public BalanceRecord(Integer id, String currencyCode, BigDecimal balanceValue, UUID accountUuid) {
        super(Balance.BALANCE);

        setId(id);
        setCurrencyCode(currencyCode);
        setBalanceValue(balanceValue);
        setAccountUuid(accountUuid);
    }
}
